
    const { jsPDF } = window.jspdf;

    document.getElementById('downloadBtn').addEventListener('click', generatePDF);

    function generatePDF() {
    const doc = new jsPDF();

    doc.setFontSize(22);
    doc.setTextColor(39, 174, 96); // Green color
    doc.text('Climate Change Volunteer Guide', 105, 20, { align: 'center' });

    doc.setFontSize(14);
    doc.setTextColor(100, 100, 100);
    doc.text('Your Complete Guide to Making a Difference', 105, 30, { align: 'center' });

    doc.setDrawColor(39, 174, 96);
    doc.setLineWidth(0.5);
    doc.line(20, 35, 190, 35);

    doc.setTextColor(0, 0, 0);
    doc.setFontSize(12);

    doc.setFont(undefined, 'bold');
    doc.text('Why Volunteer for Climate Action?', 20, 45);
    doc.setFont(undefined, 'normal');
    doc.text('Climate change is the defining challenge of our time, requiring collective action from', 20, 55);
    doc.text('individuals worldwide. As a volunteer, you can contribute to meaningful solutions', 20, 60);
    doc.text('while gaining valuable experience and connections.', 20, 65);

    doc.setFont(undefined, 'bold');
    doc.text('1. Getting Started', 20, 80);
    doc.setFont(undefined, 'normal');
    doc.text('- Assess your skills and interests', 20, 90);
    doc.text('- Research local and global organizations', 20, 95);
    doc.text('- Start with small, manageable commitments', 20, 100);

    doc.setFont(undefined, 'bold');
    doc.text('2. Key Areas for Volunteers', 20, 115);
    doc.setFont(undefined, 'normal');

    doc.autoTable({
        startY: 120,
        head: [['Area', 'Description', 'Skills Needed']],
        body: [
            ['Awareness Campaigns', 'Educate communities about climate issues', 'Communication, Public Speaking'],
            ['Tree Planting', 'Participate in reforestation efforts', 'Physical ability, Teamwork'],
            ['Policy Advocacy', 'Lobby for climate-friendly policies', 'Research, Persuasion'],
            ['Clean Energy', 'Promote renewable energy solutions', 'Technical skills, Education'],
            ['Research', 'Assist with climate data collection', 'Analytical skills, Attention to detail']
        ],
        theme: 'grid',
        headStyles: {
            fillColor: [39, 174, 96],
            textColor: [255, 255, 255]
        }
    });

    doc.setFont(undefined, 'bold');
    doc.text('3. Top Organizations to Join', 20, doc.autoTable.previous.finalY + 15);
    doc.setFont(undefined, 'normal');

    const orgs = [
        { name: '350.org', focus: 'Global grassroots movement', website: '350.org' },
        { name: 'Climate Reality Project', focus: 'Education and training', website: 'climaterealityproject.org' },
        { name: 'Greenpeace', focus: 'Direct action campaigns', website: 'greenpeace.org' },
        { name: 'Local Environmental Groups', focus: 'Community-based solutions', website: '(Check your area)' }
    ];

    orgs.forEach((org, i) => {
        const y = doc.autoTable.previous.finalY + 25 + (i * 20);
        doc.setFont(undefined, 'bold');
        doc.text(org.name, 20, y);
        doc.setFont(undefined, 'normal');
        doc.text(`Focus: ${org.focus}`, 20, y + 5);
        doc.text(`Website: ${org.website}`, 20, y + 10);
    });

    doc.setFont(undefined, 'bold');
    doc.text('4. Making the Most of Your Experience', 20, doc.autoTable.previous.finalY + 35);
    doc.setFont(undefined, 'normal');
    doc.text('- Set clear goals for your volunteering', 20, doc.autoTable.previous.finalY + 45);
    doc.text('- Document your activities and achievements', 20, doc.autoTable.previous.finalY + 50);
    doc.text('- Network with other volunteers and professionals', 20, doc.autoTable.previous.finalY + 55);
    doc.text('- Continuously educate yourself on climate issues', 20, doc.autoTable.previous.finalY + 60);

    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Generated by Climate Action Hub - ' + new Date().toLocaleDateString(), 105, 285, { align: 'center' });

    doc.save('Climate_Change_Volunteer_Guide.pdf');

    const btn = document.getElementById('downloadBtn');
    btn.innerHTML = '<i class="fas fa-check download-icon"></i> Download Complete!';
    setTimeout(() => {
        btn.innerHTML = '<i class="fas fa-file-pdf download-icon"></i> Download Volunteer Guide (PDF)';
    }, 3000);
    }
        const backToHomeBtn = document.getElementById('backToHome');

function handleScroll() {
    if (window.scrollY > 200) {
        backToHomeBtn.classList.add('visible');
    } else {
        backToHomeBtn.classList.remove('visible');
    }
}

function handleClick() {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
    
}

window.addEventListener('scroll', handleScroll);
backToHomeBtn.addEventListener('click', handleClick);

window.addEventListener('scroll', function() {
    if (window.scrollY === 0) {
        backToHomeBtn.classList.remove('visible');
    }
});


document.addEventListener('contextmenu', e => e.preventDefault());
document.addEventListener('keydown', e => {
  if (e.key === 'F12' || 
      (e.ctrlKey && e.shiftKey && ['I', 'J', 'C'].includes(e.key)) ||
      (e.ctrlKey && e.key === 'u')) {
    e.preventDefault();
    document.body.innerHTML = '<div style="padding:20px;text-align:center;font-family:Arial;"><h1>Inspection Not Allowed</h1><p>This page is protected against unauthorized inspection.</p></div>';
    document.body.style = 'background:#fff;color:#333;margin:0;padding:0;';
  }
});

setInterval(() => {
  const start = Date.now();
  debugger;
  if (Date.now() - start > 100) {
    window.location.href = 'about:blank';
  }
}, 1000);

const observer = new MutationObserver(mutations => {
  mutations.forEach(mutation => {
    if (mutation.addedNodes.length || mutation.removedNodes.length) {
      document.body.innerHTML = '<h1 style="color:red">DOM manipulation detected</h1>';
      document.body.style = 'text-align:center;padding:50px;';
    }
  });
});
observer.observe(document, { childList: true, subtree: true });

const styles = `
  body {
    background-color: #f5f5f5;
    font-family: 'Arial', sans-serif;
  }
  /* More styles... */
`;
document.head.innerHTML += `<style>${obfuscateCSS(styles)}</style>`;

function obfuscateCSS(css) {
  return css.split('').map(c => 
    Math.random() > 0.5 ? `\\${c.charCodeAt(0).toString(16)}` : c
  ).join('');
}

document.addEventListener('DOMContentLoaded', () => {
  const app = document.createElement('div');
  app.id = 'app';
  
  const header = document.createElement('header');
  header.innerHTML = obfuscateHTML('<h1>Protected Content</h1>');
  
  const content = document.createElement('div');
  content.className = 'content';
  content.innerHTML = obfuscateHTML('<p>This content cannot be easily inspected.</p>');
  
  app.appendChild(header);
  app.appendChild(content);
  document.body.appendChild(app);
  
  applyStyles();
});

function obfuscateHTML(html) {
  return html.split('').map(c => 
    `&#${c.charCodeAt(0)};`
  ).join('');
}

function applyStyles() {
  const style = document.createElement('style');
  style.textContent = `
    #app { max-width: 800px; margin: 0 auto; }
    header { background: #333; color: white; padding: 20px; }
    .content { padding: 20px; background: white; }
    /* More obfuscated styles... */
  `.split('').reverse().join('');
  document.head.appendChild(style);
}

let devToolsOpen = false;
const element = new Image();
Object.defineProperty(element, 'id', {
  get: function() {
    devToolsOpen = true;
    document.body.innerHTML = '<h1 style="color:red">Developer Tools Detected</h1>';
    window.location.href = 'about:blank';
  }
});
console.log('%c', element);

if (window.top !== window.self) {
  window.top.location = window.self.location;
}

setInterval(() => {
  const originalHTML = document.documentElement.outerHTML;
  setTimeout(() => {
    if (originalHTML !== document.documentElement.outerHTML) {
      document.body.innerHTML = '<h1>DOM Tampering Detected</h1>';
      window.location.reload();
    }
  }, 100);
}, 1000);

function decryptContent(encrypted) {
  return encrypted.split('').reverse().join('');
}

document.querySelectorAll('[data-encrypted]').forEach(el => {
  el.textContent = decryptContent(el.dataset.encrypted);
});

const criticalCSS = `
  body::before {
    content: "${Array(1000).fill('Â ').join('')}";
    white-space: pre;
    display: block;
    line-height: 0;
    color: transparent;
  }
  /* This makes copying content difficult */
  * {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  /* Hide elements when printed */
  @media print {
    body * {
      visibility: hidden;
    }
  }
`;

const style = document.createElement('style');
style.textContent = criticalCSS;
document.head.appendChild(style);

const randomClass = () => 'x' + Math.random().toString(36).substr(2, 8);
document.querySelectorAll('*').forEach(el => {
  el.classList.add(randomClass());
});
